/*
 * Parser
 * this class is responsible for parsing the tokens generated by the lexer
 * and converting them into an abstract syntax tree (AST).
 * The parser will also check for syntax errors and report them to the user.
 * * The parser will also check for the following:
 * - Expressions
 * - Literals
 * - Grouping
 * - Unary and Binary expressions
 * - Operators
 * - Parentheses
 *
 *  This is basically where we set the grammar rules for the language. 
 *  
 *  Probably the most libog part of the project pls help :((
 *  ga follow ra gyud ko sa lox tutorial
 */
package Parsers;

import Lexers.Token;
import Lexers.TokenType;
import static Lexers.TokenType.*;
import java.util.ArrayList;
import java.util.List;

/* 
* expression     → literal
*                | unary
*                | binary
*                | grouping ;
* 
* literal        → NUMBER | STRING | "true" | "false" | "nil" ;
* grouping       → "(" expression ")" ;
* unary          → ( "-" | "!" ) expression ;
* binary         → expression operator expression ;
* operator       → "==" | "!=" | "<" | "<=" | ">" | ">="
*                | "+"  | "-"  | "*" | "/" ;
*/

public class Parser {
    private final List<Token> tokens;
    private int current = 0;

    // Constructor
    public Parser(List<Token> tokens) {
        this.tokens = tokens;
    }

    // Parse the tokens and return an expression
    // main function
    public List<Stmt> parse() {
        List<Stmt> statements = new ArrayList<>();

        // consume new lines
        while (match(TokenType.NEW_LINE)) {
            // skip new lines
        }

        // ensure that the first token is a START token
        if (!match(TokenType.START)) {
            throw error(peek(), "Expect 'SUGOD' at the start of the program.");
        }

        advance(); // consume START token

        // parse the statements
        while (!isAtEnd() && !check(TokenType.END)) {
            if (match(TokenType.NEW_LINE)) continue; // skip new lines
            statements.add(statement());
        }

        // ensure that the last token is an END token
        if (!match(TokenType.END)) {
            throw error(peek(), "Expect 'KATAPUSAN' at the end of the program.");
        }
        // consume END token
        advance(); // consume END token

        // check if there are tokens after the END token
        if (!isAtEnd()) {
            throw error(peek(), "Unexpected token after 'KATAPUSAN'.");
        }

        return statements;
    }

    // this function is used to parse the expression
    private Expr expression() {
        return assignment();
    }

    private Stmt statement() {
        // System.out.println("Parser: parsing statement at token: " + peek().getLexeme());

        Stmt stmt;

        if (match(TokenType.PRINT)) {
            stmt = printStatement();
        } else if (match(TokenType.VAR)) {
            stmt = varDeclaration();
        } else if (match(TokenType.LEFT_BRACE)) {
            stmt = new Stmt.Block(block());
        } else {
            stmt = expressionStatement();
        }

        if (!match(TokenType.NEW_LINE) && !check(TokenType.END)) {
            throw error(peek(), "Expect new line after statement.");
        }

        return stmt;
    }

    private Stmt declaration() {
        try {
        if (match(DECLARE)) return varDeclaration();

        return statement();
        } catch (ParseError error) {
            synchronize();
            return null;
        }
    }

    private Stmt printStatement() {
        consume(TokenType.COLON, "Expect ':' after 'IPAKITA'.");
        // System.out.println("Parser: print statement");
        Expr value = expression();

        while (match(TokenType.NEW_LINE_LITERAL) || match(TokenType.CONCAT)) {
            Token operator = previous();

            Expr right;
            if (operator.getType() == TokenType.NEW_LINE_LITERAL) {
                right = new Expr.Literal('\n');
            } else {
                right = expression();
            }
            value = new Expr.Binary(value, operator, right);
        }
        return new Stmt.Print(value);
    }

    private Stmt varDeclaration() {
        // need to consume data types
        TokenType dataType = peek().getType();
        // System.out.println("Parser: declared dataType: " + dataType);

        if (dataType != INTEGER 
        && dataType != FLOAT 
        && dataType != CHARACTER
        && dataType != BOOLEAN
        && dataType != STRING) {
            throw error(peek(), "Invalid data type.");
        }

        advance(); // consume data type

        // parse the variable nameS PLURAL for multi declaration
        List<Token> names = new ArrayList<>();
        List<Expr> initializers = new ArrayList<>();
        
        do {
            Token name = consume(TokenType.IDENTIFIER, "Expected variable name.");
            names.add(name);

            if (match(EQUAL)) {
                // if the next token is a new line or end, throw an error
                if (check(TokenType.NEW_LINE) || check(TokenType.END)) {
                    throw error(peek(), "Missing initializer after '='.");
                }

                Expr initializer = expression();
                // debugging
                // System.out.println("Parser: found initializer: " + name.getLexeme() + " = " + initializer);
                initializers.add(initializer);
            } else {
                initializers.add(null);
            }

        } while (match(COMMA));

        // DEBUGGINg
        // System.out.println("Parser: names: " + names);
        // System.out.println("Parser: initializer: " + initializers);
        // System.out.println("Parser: dataType: " + dataType);

        return new Stmt.MultiVar(names, initializers, dataType);
    }

    private Stmt expressionStatement() {
        Expr expr = expression();
        return new Stmt.Expression(expr);
    }

    private List<Stmt> block() {
        List<Stmt> statements = new ArrayList<>();

        while (!check(RIGHT_BRACE) && !isAtEnd()) {
            if (match(TokenType.NEW_LINE)) continue;
            statements.add(declaration());
        }

        consume(RIGHT_BRACE, "Expect '}' after block.");
        return statements;
    }

    private Expr assignment() {
        Expr expr = equality();
        // System.out.println("Parser: left side of assignment: " + expr);

        if (match(EQUAL)) {
            Token equals = previous();
            Expr value = assignment();
            // System.out.println("Parser: right side of assignment: " + value);

            if (expr instanceof Expr.Variable) {
                Token name = ((Expr.Variable)expr).name;
                return new Expr.Assign(name, value);
            }

            error(equals, "Invalid assignment target."); 
        }

        return expr;
    }


    // this function is used to parse the equality expression
    private Expr equality() {
        Expr expr = comparison();

        while (match(NOT_EQUAL, NOT_EQUAL)) {
        Token operator = previous();
        Expr right = comparison();
        expr = new Expr.Binary(expr, operator, right);
        }

        return expr;
    }

    // this function is used to parse the comparison expression
    private Expr comparison() {
        Expr expr = term();

        while (match(GREATER, GREATER_EQUAL, LESS, LESS_EQUAL)) {
            Token operator = previous();
            Expr right = term();
            expr = new Expr.Binary(expr, operator, right);
        }

        return expr;
    }

    // this function is used to parse the term expression
    private Expr term() {
        Expr expr = factor();

        while (match(TokenType.MINUS, TokenType.PLUS)) {
            Token operator = previous();
            Expr right = factor();
            expr = new Expr.Binary(expr, operator, right);
        }

        return expr;
    }

    // this function is used to parse the factor expression
    private Expr factor() {
        Expr expr = unary();

        while (match(TokenType.DIVIDE, TokenType.MULTIPLY)) {
            Token operator = previous();
            Expr right = unary();
            expr = new Expr.Binary(expr, operator, right);
        }

        return expr;
    }

    // this function is used to parse the unary expression
    private Expr unary() {
        if (match(TokenType.NOT, TokenType.MINUS)) {
            Token operator = previous();
            Expr right = unary();
            return new Expr.Unary(operator, right);
        }

        return primary();
    }

    // this function is used to parse the primary expression
    private Expr primary() {
        if (match(TokenType.FALSE)) return new Expr.Literal(false);
        if (match(TokenType.TRUE)) return new Expr.Literal(true);
        if (match(TokenType.NIL)) return new Expr.Literal(null);

        if (match(TokenType.INTEGER, TokenType.FLOAT, TokenType.CHARACTER, TokenType.STRING)) {
            // Return a literal expression for numbers, strings, etc.
            return new Expr.Literal(previous().getLiteral());
        }

        if (match(TokenType.NEW_LINE_LITERAL)) {
            // Return a literal expression for new line
            return new Expr.Literal('\n');
        }

        if (match(TokenType.IDENTIFIER)) {
            // Return a variable expression for identifiers
            return new Expr.Variable(previous());
        }

        if (match(TokenType.LEFT_PAREN)) {
            Expr expr = expression();
            consume(TokenType.RIGHT_PAREN, "Expect ')' after expression.");
            return new Expr.Grouping(expr);
        }

        // if (match(TokenType.INTEGER, TokenType.FLOAT, TokenType.CHARACTER, TokenType.STRING)) {
        //     // DEBUG FOR PARSER
        //     // Object literalValue = previous().getLiteral();
        //     // System.out.println("Parser literalValue: " + literalValue + " type: " + previous().getType());
        //     return new Expr.Literal(previous().getLiteral());
        // }

        // if (match(TokenType.LEFT_PAREN)) {
        //     Expr expr = expression();
        //     consume(TokenType.RIGHT_PAREN, "Expect ')' after expression.");
        //     return new Expr.Grouping(expr);
        // }

        throw error(peek(), "Expect expression.");
    }

    // error handling methods
    // this class is used to handle the parse error
    private static class ParseError extends RuntimeException {}

    // this function is used to consume the token
    private Token consume(TokenType type, String message) {
        if (check(type)) return advance();

        throw error(peek(), message);
    }

    // this function is used to handle the error
    private ParseError error(Token token, String message) {
        reportError(token, message);
        return new ParseError();
    }

    // this function is used to report the error
    static void reportError(Token token, String message) {
        if (token.getType() == TokenType.EOF) {
            report(token.getLine(), " at end", message);
        } else {
            report(token.getLine(), " at '" + token.getLexeme() + "'", message);
        }
    }

    // this function is used to report the error
    private static void report(int line, String where, String message) {
        System.err.println("[line " + line + "] Error" + where + ": " + message);
    }

    // this function is used to synchronize the parser with the tokens
    private void synchronize() {
        advance();

        while (!isAtEnd()) {
        if (previous().getType() == TokenType.NEW_LINE) return;

        switch (peek().getType()) {
            // TODO
            // case CLASS:
            // case FUN:
            // case VAR:
            case FOR:
            case IF:
            case WHILE:
            case PRINT:
            case RETURN:
            return;
        }

        advance();
        }
    }

    // this function is used to match the token with the type
    private boolean match(TokenType... types) {
        for (TokenType type : types) {
            if (check(type)) {
                // DEBUGGING
                // System.out.println("Parser: matched token: " + type);
                advance();
                return true;
            }
        }

        return false;
    }

    // this function is used to check if the token is of the type
    private boolean check(TokenType type) {
        if (isAtEnd()) return false;
        return peek().getType() == type;
    }

    // Helper functions
    private boolean isAtEnd() {
        return peek().getType() == TokenType.EOF;
    }

    private Token peek() {
        return tokens.get(current);
    }

    private Token advance() {
        if (!isAtEnd()) {
            // DEBUGGING
            // System.out.println("Parser: advancing token: " + peek());
            current++;
        }
        return previous();
    }

    private Token previous() {
        return tokens.get(current - 1);
    }
}
